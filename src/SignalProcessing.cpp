#include<algorithm>
#include<iostream>
#include<limits>
#include<map>
#include<mkl.h>
#include<tbb/tbb.h>
#include"SignalProcessing.hpp"
#include"ChannelRemapping.hpp"

// Assert that these are indeed the same type at compile type due to the unsafe reinterpret_cast 's used in these functions
// Both of these types should be a struct containing two floats
// struct {
//      float real;
//      float imag;
// }
static_assert(std::is_same<decltype(MKL_Complex8::real), decltype(std::complex<float>().real())>::value, "MKL_Complex8 doesn't equal std::complex<float>");
static_assert(std::is_same<decltype(MKL_Complex8::imag), decltype(std::complex<float>().imag())>::value, "MKL_Complex8 doesn't equal std::complex<float>");
static_assert(sizeof(MKL_Complex8) == sizeof(std::complex<float>), "MKL_Complex8 doesn't equal std::complex<float>");

// Remaps the channels based on the mapping given to it, once the channels are remapped the data may be
// conjugated based on the data in ChannelRemapping.
// This mapping is to be generated by computeChannelRemapping() in ChannelRemapping.hpp
// The signalOut will have the same amount of samples as signalData but with the same or different number of channels
void remapChannels(std::vector<std::complex<float>> const& signalData,
                          std::vector<std::complex<float>>& signalOut,
                          std::map<unsigned, ChannelRemapping::RemappedChannel> const& mapping,
                          unsigned const numberOfSamples,
                          unsigned const newNumChannels);

// Performs an inverse polyphase filter bank (PFB) on the signal data, the mapping is required
// for this function so the convolution only goes over the appropriate channels. This mapping
// is provided by computeChannelRemapping() in ChannelRempping.hpp
void performPFB(std::vector<std::complex<float>> const& signalData,
                       std::vector<std::complex<float>>& signalOut,
                       std::vector<std::complex<float>> const& coefficantPFB,
                       std::map<unsigned, ChannelRemapping::RemappedChannel> const& mapping,
                       unsigned const numberOfSamples,
                       unsigned const numOfChannels);

// Performs an inverse discrete fourier transorm on the signal data, changing the frequency
// data into a time domain signal this is done in place! DO NOT use imaginary conmpenent of the data
// this is done to save a copy.
void performDFT(std::vector<std::complex<float>>& signalData);

// Converts the downsampled time domain array into a 16bit signed int with clamping
void doPostProcessing(std::vector<std::complex<float>> const& signalData,
                             std::vector<std::int16_t>& signalOut);

// Simple function that checks the status of a MKL_LONG and outputs it to console
// TODO: throw exception.
static void handleMKLError(MKL_LONG status) {
    if ( status && !DftiErrorClass(status, DFTI_NO_ERROR) ) {
           std::cout << "Error: " << DftiErrorMessage(status) << std::endl;
      }
}

std::vector<std::int16_t> processSignal(std::vector<std::complex<float>> const& signalData,
                               std::vector<std::complex<float>> const& coefficiantPFB,
                               ChannelRemapping const& remappingData) {
    std::cout << "ProcessSignal Called" << std::endl;

    unsigned const IN_NUM_SAMPLES = signalData.size() / remappingData.channelMap.size();
    unsigned const OUT_NUM_CHANNELS = remappingData.newSamplingFreq / 2;

    std::vector<std::complex<float>> remappedData = std::vector<std::complex<float>>();
    std::vector<std::complex<float>> convolvedData = std::vector<std::complex<float>>();
    std::vector<std::int16_t> outData = std::vector<std::int16_t>();



    // remapChannels(signalData, remappedData, remappingData);
    // performPFB(signalData, convolvedData, coefficiantPFB, remappingData.channelMap);
    // performDFT(convolvedData);
    // doPostProcessing(signalData, outData);

    return outData;
}

void remapChannels(std::vector<std::complex<float>> const& signalData,
                          std::vector<std::complex<float>>& signalOut,
                          std::map<unsigned, ChannelRemapping::RemappedChannel> const& mapping,
                          unsigned const numberOfSamples,
                          unsigned const newNumOfChannels) {
    // Tell the vector it's size
    signalOut.resize(newNumOfChannels * numberOfSamples);

    // Work over each element of the mapping
    for (auto map : mapping) {
        // Assign better names to iterator variables
        unsigned oldChannel = map.first;
        unsigned newChannel = map.second.newChannel;
        bool flipped = map.second.flipped;

        if (flipped) {
            // Do a strided conjugated copy over it
            vcConjI(numberOfSamples,
                    reinterpret_cast<const MKL_Complex8*>(&signalData.data()[oldChannel]), mapping.size(),
                    reinterpret_cast<MKL_Complex8*>(&signalOut.data()[newChannel]), newNumOfChannels);
        }
        else {
            // Do a strided copy over it
            cblas_ccopy(numberOfSamples,
                        &signalData.data()[oldChannel], mapping.size(),
                        &signalOut.data()[newChannel], newNumOfChannels);
        }
    }

}

void performPFB(std::vector<std::complex<float>> const& signalData,
                       std::vector<std::complex<float>>& outSignal,
                       std::vector<std::complex<float>> const& coefficantPFB,
                       std::map<unsigned, ChannelRemapping::RemappedChannel> const& mapping,
                       unsigned const numberOfSamples,
                       unsigned const numOfChannels) {
    VSLConvTaskPtr convolutionTask = nullptr;

    // TODO: handle the error cases for this function
    vslcConvNewTask1D(&convolutionTask,
                      VSL_CORR_MODE_AUTO,
                      numberOfSamples,
                      coefficantPFB.size() / numOfChannels,
                      numberOfSamples);

    // Only work over the channels that actually have something in them
    for(auto map : mapping) {
        unsigned const oldChannel = map.first;
        unsigned const newChannel = map.second.newChannel;
        // TODO: handle error cases for this function call
        // NOTE: Stride over coefficantPFB data is using the original channel data as it didn't get remapped
        vslcConvExec1D(convolutionTask,
                       const_cast<MKL_Complex8*>(reinterpret_cast<const MKL_Complex8*>(&signalData.data()[newChannel])), numOfChannels,
                       reinterpret_cast<MKL_Complex8*>(&outSignal.data()[newChannel]), numOfChannels,
                       const_cast<MKL_Complex8*>(reinterpret_cast<const MKL_Complex8*>(&coefficantPFB.data()[oldChannel])), mapping.size());
    }
}

void performDFT(std::vector<std::complex<float>>& signalData) {
    DFTI_DESCRIPTOR_HANDLE hand;

    handleMKLError(DftiCreateDescriptor(&hand, DFTI_SINGLE, DFTI_COMPLEX, 1, signalData.size()));
    handleMKLError(DftiCommitDescriptor(hand));
    handleMKLError(DftiComputeBackward(hand, signalData.data()));
    handleMKLError(DftiFreeDescriptor(&hand));
}

constexpr std::int16_t clamp(float n) {
    if (n > std::numeric_limits<std::int16_t>::max()) { return std::numeric_limits<std::int16_t>::max(); }
    if (n < std::numeric_limits<std::int16_t>::min()) { return std::numeric_limits<std::int16_t>::min(); }
    return static_cast<std::int16_t>(n);
}

void doPostProcessing(std::vector<std::complex<float>> const& signalData,
                             std::vector<std::int16_t>& signalOut) {
    signalOut.resize(signalData.size());

    tbb::parallel_for(size_t{0}, signalData.size(), [&signalData, &signalOut](size_t ii) {
        signalOut[ii] = clamp(signalData[ii].real());
    });
}
