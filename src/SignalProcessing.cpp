#include<iostream>
#include<map>
#include"SignalProcessing.hpp"
#include"ChannelRemapping.hpp"

// Remaps the channels based on the mapping given to it, once the channels are remapped the data may be
// conjugated based on the data in ChannelRemapping.
// This mapping is to be generated by computeChannelRemapping() in ChannelRemapping.hpp
static void remapChannels(std::vector<std::complex<float>> const& signalData,
                          std::vector<std::complex<float>>& signalOut,
                          ChannelRemapping const& remappingData);

// Performs an inverse polyphase filter bank (PFB) on the signal data, the mapping is required
// for this function so the convolution only goes over the appropriate channels. This mapping
// is provided by computeChannelRemapping() in ChannelRempping.hpp
static void performPFB(std::vector<std::complex<float>> const& signalData,
                       std::vector<std::complex<float>>& signalOut,
                       std::vector<std::complex<float>> const& coefficantPFB,
                       std::map<unsigned, ChannelRemapping::RemappedChannel> const& mapping);

// Performs an inverse discrete fourier transorm on the signal data, changing the frequency
// data into a time domain signal this is done in place! DO NOT use imaginary conmpenent of the data
// this is done to save a copy.
static void performDFT(std::vector<std::complex<float>>& signalData);

// Converts the downsampled time domain array into a 16bit signed int with clamping
static void doPostProcessing(std::vector<std::complex<float>> const& signalData,
                             std::vector<std::int16_t>& signalOut);


std::vector<std::int16_t> processSignal(std::vector<std::complex<float>> const& signalData,
                               std::vector<std::complex<float>> const& coefficiantPFB,
                               ChannelRemapping const& remappingData) {
    std::cout << "ProcessSignal Called" << std::endl;

    std::vector<std::complex<float>> remappedData = std::vector<std::complex<float>>();
    std::vector<std::complex<float>> convolvedData = std::vector<std::complex<float>>();
    std::vector<std::int16_t> outData = std::vector<std::int16_t>();

    remapChannels(signalData, remappedData, remappingData);
    performPFB(signalData, convolvedData, coefficiantPFB, remappingData.channelMap);
    performDFT(convolvedData);
    doPostProcessing(signalData, outData);

    return outData;
}

static void remapChannels(std::vector<std::complex<float>> const& signalData,
                          std::vector<std::complex<float>>& signalOut,
                          ChannelRemapping const& remappingData) {
    std::cout << "remapChannels() called" << std::endl;
}

static void performPFB(std::vector<std::complex<float>> const& signalData,
                       std::vector<std::complex<float>>& outSignal,
                       std::vector<std::complex<float>> const& coefficantPFB,
                       std::map<unsigned, ChannelRemapping::RemappedChannel> const& mapping) {
    std::cout << "performPFB() called" << std::endl;
}

static void performDFT(std::vector<std::complex<float>>& signalData) {
    std::cout << "performDFT() called" << std::endl;
}

static void doPostProcessing(std::vector<std::complex<float>> const& signalData,
                             std::vector<std::int16_t>& signalOut) {
    std::cout << "doPostProcessing() called" << std::endl;
}

