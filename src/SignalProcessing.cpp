#include<iostream>
#include<map>
#include<mkl.h>
#include"SignalProcessing.hpp"
#include"ChannelRemapping.hpp"

// Number of channels that the input data uses
static const unsigned IN_NUM_CHANNELS = 256;

// Remaps the channels based on the mapping given to it, once the channels are remapped the data may be
// conjugated based on the data in ChannelRemapping.
// This mapping is to be generated by computeChannelRemapping() in ChannelRemapping.hpp
static void remapChannels(std::vector<std::complex<float>> const& signalData,
                          std::vector<std::complex<float>>& signalOut,
                          ChannelRemapping const& remappingData);

// Performs an inverse polyphase filter bank (PFB) on the signal data, the mapping is required
// for this function so the convolution only goes over the appropriate channels. This mapping
// is provided by computeChannelRemapping() in ChannelRempping.hpp
static void performPFB(std::vector<std::complex<float>> const& signalData,
                       std::vector<std::complex<float>>& signalOut,
                       std::vector<std::complex<float>> const& coefficantPFB,
                       std::map<unsigned, ChannelRemapping::RemappedChannel> const& mapping);

// Performs an inverse discrete fourier transorm on the signal data, changing the frequency
// data into a time domain signal this is done in place! DO NOT use imaginary conmpenent of the data
// this is done to save a copy.
static void performDFT(std::vector<std::complex<float>>& signalData);

// Converts the downsampled time domain array into a 16bit signed int with clamping
static void doPostProcessing(std::vector<std::complex<float>> const& signalData,
                             std::vector<std::int16_t>& signalOut);

// Simple function that checks the status of a MKL_LONG and outputs it to console
// TODO: throw exception.
static void handleMKLError(MKL_LONG status) {
    if ( status && !DftiErrorClass(status, DFTI_NO_ERROR) ) {
           std::cout << "Error: " << DftiErrorMessage(status) << std::endl;
      }
}

std::vector<std::int16_t> processSignal(std::vector<std::complex<float>> const& signalData,
                               std::vector<std::complex<float>> const& coefficiantPFB,
                               ChannelRemapping const& remappingData) {
    std::cout << "ProcessSignal Called" << std::endl;

    std::vector<std::complex<float>> remappedData = std::vector<std::complex<float>>();
    std::vector<std::complex<float>> convolvedData = std::vector<std::complex<float>>();
    std::vector<std::int16_t> outData = std::vector<std::int16_t>();

    // remapChannels(signalData, remappedData, remappingData);
    // performPFB(signalData, convolvedData, coefficiantPFB, remappingData.channelMap);
    // performDFT(convolvedData);
    // doPostProcessing(signalData, outData);

    return outData;
}

static void remapChannels(std::vector<std::complex<float>> const& signalData,
                          std::vector<std::complex<float>>& signalOut,
                          ChannelRemapping const& remappingData) {
    // Allocate space in the signal out vector to copy into
    signalOut.reserve(remappingData.newSamplingFreq);

    // Calculate the new number of channels, this will be the highest channel in the mapping
    // Which will always be half of the sampling frequency due to the nyquist sampling
    unsigned newNumOfChannels = remappingData.newSamplingFreq / 2;

    // Work over each element of the mapping
    for (auto mapping : remappingData.channelMap) {
        // Assign better names to iterator variables
        unsigned oldChannel = mapping.first;
        unsigned newChannel = mapping.second.newChannel;
        bool flipped = mapping.second.flipped;

        if (flipped) {
            // Do a strided conjugated copy over it
            vcConjI(remappingData.newSamplingFreq,
                        (MKL_Complex8*)&signalData.data()[oldChannel], IN_NUM_CHANNELS,
                        (MKL_Complex8*)&signalOut.data()[newChannel], newNumOfChannels);
        }
        else {
            // Do a strided copy over it
            cblas_ccopy(remappingData.newSamplingFreq,
                        &signalData.data()[oldChannel], IN_NUM_CHANNELS,
                        &signalOut.data()[newChannel], newNumOfChannels);
        }
    }
}

static void performPFB(std::vector<std::complex<float>> const& signalData,
                       std::vector<std::complex<float>>& outSignal,
                       std::vector<std::complex<float>> const& coefficantPFB,
                       std::map<unsigned, ChannelRemapping::RemappedChannel> const& mapping) {
    std::cout << "performPFB() called" << std::endl;
}

static void performDFT(std::vector<std::complex<float>>& signalData) {
    DFTI_DESCRIPTOR_HANDLE hand;

    handleMKLError(DftiCreateDescriptor(&hand, DFTI_SINGLE, DFTI_COMPLEX, 1, signalData.size()));
    handleMKLError(DftiCommitDescriptor(hand));
    handleMKLError(DftiComputeBackward(hand, signalData.data()));
    handleMKLError(DftiFreeDescriptor(&hand));
}

static void doPostProcessing(std::vector<std::complex<float>> const& signalData,
                             std::vector<std::int16_t>& signalOut) {
    std::cout << "doPostProcessing() called" << std::endl;
}
