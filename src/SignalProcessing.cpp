#include<limits>
#include<mkl.h>
#include<tbb/tbb.h>
#include"SignalProcessing.hpp"
#include"ChannelRemapping.hpp"

// Assert that these are indeed the same type at compile type due to the unsafe reinterpret_cast 's used in these functions
// Both of these types should be a struct containing two floats
// struct {
//      float real;
//      float imag;
// }
static_assert(std::is_same<decltype(MKL_Complex8::real), decltype(std::complex<float>().real())>::value, "MKL_Complex8 doesn't equal std::complex<float>");
static_assert(std::is_same<decltype(MKL_Complex8::imag), decltype(std::complex<float>().imag())>::value, "MKL_Complex8 doesn't equal std::complex<float>");
static_assert(sizeof(MKL_Complex8) == sizeof(std::complex<float>), "MKL_Complex8 doesn't equal std::complex<float>");

// Remaps the channels based on the mapping given to it, once the channels are remapped the data may be
// conjugated based on the data in ChannelRemapping.
// This mapping is to be generated by computeChannelRemapping() in ChannelRemapping.hpp
// The signalDataOut will have the same amount of samples as signalData but with the same or different number of channels
void remapChannels(std::vector<std::vector<std::complex<float>>> const& signalDataIn,
                   std::map<unsigned, unsigned> const& signalDataInMapping,
                   std::vector<std::complex<float>>& signalDataOut,
                   std::map<unsigned, ChannelRemapping::RemappedChannel> const& channelRemapping,
                   unsigned const outNumChannels);

static const unsigned PFB_COE_CHANNELS = 256;

// Performs an inverse polyphase filter bank (PFB) on the signal data, the mapping is required
// for this function so the convolution only goes over the appropriate channels. This mapping
// is provided by computeChannelRemapping() in ChannelRempping.hpp
void performPFB(std::vector<std::complex<float>> const& signalData,
                       std::vector<std::complex<float>>& signalDataOut,
                       std::vector<std::complex<float>> const& coefficantPFB,
                       std::map<unsigned, ChannelRemapping::RemappedChannel> const& mapping,
                       unsigned const numOfBlocks,
                       unsigned const numOfChannels);

// Performs an inverse discrete fourier transorm on the signal data, changing the frequency
// data into a time domain signal this is done in place! DO NOT use imaginary conmpenent of the data
// this is done to save a copy.
void performDFT(std::vector<std::complex<float>>& signalData,
                unsigned const samplingFreq,
                unsigned const numberOfChannels);

// Converts the downsampled time domain array into a 16bit signed int with clamping
void doPostProcessing(std::vector<std::complex<float>> const& signalData,
                             std::vector<std::int16_t>& signalDataOut);

// Simple function that checks the status of a MKL_LONG and outputs it to console
static inline void handleMKLError(MKL_LONG status) {
    if ( status && !DftiErrorClass(status, DFTI_NO_ERROR) ) {
        throw SignalProcessingMKLError(DftiErrorMessage(status));
      }
}

void processSignal(std::vector<std::vector<std::complex<float>>> const& signalDataIn,
                               std::map<unsigned, unsigned> const& signalDataInMapping,
                               std::vector<std::int16_t>& signalDataOut,
                               std::vector<std::complex<float>> const& coefficiantPFB,
                               ChannelRemapping const& remappingData) {
    if ( remappingData.channelMap.empty() ) {
        throw std::invalid_argument("ChannelRemapping cannot be empty ");
    }

    unsigned const IN_NUM_CHANNELS = remappingData.channelMap.rbegin()->first + 1;

    if ( signalDataIn.size() % IN_NUM_CHANNELS != 0 ) {
        throw std::invalid_argument("signalDataIn is not a multiple of the number of channels");
    }

    unsigned const IN_NUM_BLOCKS = signalDataIn[0].size();

    if ( IN_NUM_BLOCKS % 2 != 0 && IN_NUM_BLOCKS != 1 ) {
        throw std::invalid_argument("Number of samples in the input data is not a multiple of 2 or size of 1");
    }


    // New number of channels will be half the number of samples due the nyquist sampling theory
    unsigned const OUT_NUM_CHANNELS = remappingData.newSamplingFreq / 2;

    if ( IN_NUM_CHANNELS < OUT_NUM_CHANNELS ) {
        throw std::invalid_argument("Invalid signalDataIn, channelMap combination");
    }

    if ( coefficiantPFB.size() % PFB_COE_CHANNELS != 0 ) {
        throw std::invalid_argument("PFB coefficant data is not a multiple of number of PFB channels "
                + std::to_string(PFB_COE_CHANNELS));
    }

    std::vector<std::complex<float>> convolvedData{};

    // Scope these two function calls as remappedData doesn't need to be used outside it
    {
        std::vector<std::complex<float>> remappedData{};
        remapChannels(signalDataIn, signalDataInMapping, remappedData, remappingData.channelMap, OUT_NUM_CHANNELS);
        performPFB(remappedData, convolvedData, coefficiantPFB, remappingData.channelMap, IN_NUM_BLOCKS, OUT_NUM_CHANNELS);
    }
    performDFT(convolvedData, remappingData.newSamplingFreq, OUT_NUM_CHANNELS);
    doPostProcessing(convolvedData, signalDataOut);
}

void remapChannels(std::vector<std::vector<std::complex<float>>> const& signalDataIn,
                   std::map<unsigned, unsigned> const& signalDataInMapping,
                   std::vector<std::complex<float>>& signalDataOut,
                   std::map<unsigned, ChannelRemapping::RemappedChannel> const& channelRemapping,
                   unsigned const outNumChannels) {

    unsigned const NUM_OF_BLOCKS = signalDataIn[0].size();
    // Tell the vector it's size and fill with zeros
    signalDataOut.resize(outNumChannels * NUM_OF_BLOCKS);

    // Work over each element of the mapping
    for (auto map : channelRemapping) {
        // Assign better names to iterator variables
        unsigned const oldChannel = map.first;
        unsigned const newChannel = map.second.newChannel;
        bool const flipped = map.second.flipped;

        // Grab the correct channel vector based on the mapping
        std::vector<std::complex<float>> const channelVector = signalDataIn[signalDataInMapping.find(oldChannel)->second];

        if (flipped) {
            // Do a strided conjugated copy over it
            vcConjI(NUM_OF_BLOCKS,
                    reinterpret_cast<const MKL_Complex8*>(channelVector.data()), 1,
                    reinterpret_cast<MKL_Complex8*>(signalDataOut.data() + newChannel), outNumChannels);
        }
        else {
            // Do a strided copy over it
            cblas_ccopy(NUM_OF_BLOCKS,
                        channelVector.data(), 1,
                        signalDataOut.data() + newChannel, outNumChannels);
        }
    }
}

void performPFB(std::vector<std::complex<float>> const& signalData,
                       std::vector<std::complex<float>>& signalDataOut,
                       std::vector<std::complex<float>> const& coefficantPFB,
                       std::map<unsigned, ChannelRemapping::RemappedChannel> const& mapping,
                       unsigned const numOfBlocks,
                       unsigned const numOfChannels) {
    VSLConvTaskPtr convolutionTask = nullptr;

    // TODO: handle the error cases for this function
    vslcConvNewTask1D(&convolutionTask,
                      VSL_CORR_MODE_AUTO,
                      numOfBlocks,
                      coefficantPFB.size() / PFB_COE_CHANNELS,
                      numOfBlocks);

    // Only work over the channels that actually have something in them
    for(auto map : mapping) {
        unsigned const oldChannel = map.first;
        unsigned const newChannel = map.second.newChannel;
        // TODO: handle error cases for this function call
        // NOTE: Stride over coefficantPFB data is using the original channel data as it didn't get remapped
        vslcConvExec1D(convolutionTask,
                       reinterpret_cast<const MKL_Complex8*>(signalData.data() + newChannel), numOfChannels,
                       reinterpret_cast<const MKL_Complex8*>(coefficantPFB.data() + oldChannel), PFB_COE_CHANNELS,
                       reinterpret_cast<MKL_Complex8*>(signalDataOut.data() + newChannel), numOfChannels);
    }
}

void performDFT(std::vector<std::complex<float>>& signalData,
                unsigned const samplingFreq,
                unsigned const numOfChannels) {
    DFTI_DESCRIPTOR_HANDLE hand;

    handleMKLError(DftiCreateDescriptor(&hand, DFTI_SINGLE, DFTI_COMPLEX, 1, numOfChannels));
    handleMKLError(DftiSetValue(hand, DFTI_BACKWARD_SCALE, 1.0f / static_cast<float>(samplingFreq)));
    handleMKLError(DftiSetValue(hand, DFTI_NUMBER_OF_TRANSFORMS, static_cast<MKL_LONG>(samplingFreq)));
    handleMKLError(DftiSetValue(hand, DFTI_INPUT_DISTANCE, numOfChannels));
    handleMKLError(DftiCommitDescriptor(hand));
    handleMKLError(DftiComputeBackward(hand, signalData.data()));
    handleMKLError(DftiFreeDescriptor(&hand));
}

constexpr std::int16_t clamp(float n) {
    if (n > std::numeric_limits<std::int16_t>::max()) { return std::numeric_limits<std::int16_t>::max(); }
    if (n < std::numeric_limits<std::int16_t>::min()) { return std::numeric_limits<std::int16_t>::min(); }
    return static_cast<std::int16_t>(n);
}

void doPostProcessing(std::vector<std::complex<float>> const& signalData,
                             std::vector<std::int16_t>& signalDataOut) {
    signalDataOut.resize(signalData.size());

    tbb::parallel_for(size_t{0}, signalData.size(), [&signalData, &signalDataOut](size_t ii) {
        signalDataOut[ii] = clamp(signalData[ii].real());
    });
}
